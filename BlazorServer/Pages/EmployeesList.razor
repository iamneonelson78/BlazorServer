@page "/Employees"

@using Radzen
@using Radzen.Blazor
@using System.IO
@using ClosedXML.Excel

@inject IEmployeeService empService
@inject NavigationManager navigationManager

@inject IJSRuntime JsRuntime



<h1>List of Employees</h1>
@*<a href="AddEmployee" class="btn btn-success" role="button">+ Add New Employee</a>*@
<hr />

<div class="alert alert-dismissible @notificationtype" style="position: fixed; top: 150px; right: 0; z-index: 2" hidden="@IsShow">
    <i class="icon-check"></i><strong>@Message.ToUpper()</strong>
</div>

@if (empObj is null)
{
    <div class="container-fluid align-items-xl-center">
        <p><em>Fetching Data....Please wait!</em></p>
        <div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
    </div>
}
else
{
    <RadzenButton Text="Add" Icon="add_circle_outline" Click="@(args => AddNew())" Class="mb-4 mr-2" ButtonStyle="ButtonStyle.Success" />
    <RadzenButton Text="Export" Icon="grid_on" Click="@(args => ExportXL("Employees"))" Class="mb-4" ButtonStyle="ButtonStyle.Warning" />
    <RadzenGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10"
                AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@empObj" TItem="Employee" ColumnWidth="150px" LogicalFilterOperator="LogicalFilterOperator.Or">

        <Columns>
            <RadzenGridColumn TItem="Employee" Property="EmployeeId" Title="ID"> </RadzenGridColumn>
            <RadzenGridColumn TItem="Employee" Property="FirstName" Title="First Name"> </RadzenGridColumn>
            <RadzenGridColumn TItem="Employee" Property="LastName" Title="Last Name"> </RadzenGridColumn>
            <RadzenGridColumn TItem="Employee" Property="Gender" Title="Gender"> </RadzenGridColumn>
            <RadzenGridColumn TItem="Employee" Property="DateHired" Title="Date Hired">
                <Template Context="data">
                    @String.Format("{0:d}", data.DateHired)
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="Employee" Context="Employee" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                <Template Context="Employee">
                    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="edit" Size="ButtonSize.Small" Class="m-1" Click="@(args => EditEmployee(Employee.EmployeeId))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteEmployee(Employee.EmployeeId))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
            </RadzenGridColumn>

        </Columns>
    </RadzenGrid>
}

@code {
    IEnumerable<Employee> empObj;

    [Parameter] public int EmpId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        empObj = await Task.Run(() => empService.GetAllEmployeesAsync());
    }

    async Task AddNew()
    {
        navigationManager.NavigateTo("AddEmployee");
    }
    async Task EditEmployee(int EmpId)
    {
        navigationManager.NavigateTo($"/EditEmployee/{EmpId}");
    }

    async Task DeleteEmployee(int EmpId)
    {
        navigationManager.NavigateTo($"/DeleteEmployee/{EmpId}");
    }


    public async Task ExportXL(string fName)
    {


        using (var workbook = new XLWorkbook())
        {
            IXLWorksheet worksheet =
            workbook.Worksheets.Add(fName);
            worksheet.Cell(1, 1).Value = "EmployeeId";
            worksheet.Cell(1, 2).Value = "FirstName";
            worksheet.Cell(1, 3).Value = "LastName";
            worksheet.Cell(1, 4).Value = "Gender";
            worksheet.Cell(1, 5).Value = "DateHired";

            for (int i = 1; i <= 5; i++)
            {
                worksheet.Cell(1, i).Style.Font.Bold = true;

            }

            int index = 1;
            foreach (var emp in empObj)
            {
                worksheet.Cell(index + 1, 1).Value = emp.EmployeeId;
                worksheet.Cell(index + 1, 2).Value = emp.FirstName;
                worksheet.Cell(index + 1, 3).Value = emp.LastName;
                worksheet.Cell(index + 1, 4).Value = emp.Gender;
                worksheet.Cell(index + 1, 5).Value = emp.DateHired;

                index++;
            }


            for (int rowCount = 1; rowCount <= empObj.Count() + 1; rowCount++)
            {
                for (int i = 1; i <= 5; i++)
                {
                    worksheet.Cell(rowCount, i).Style.Border.TopBorder = XLBorderStyleValues.Thin;
                    worksheet.Cell(rowCount, i).Style.Border.BottomBorder = XLBorderStyleValues.Thin;
                    worksheet.Cell(rowCount, i).Style.Border.LeftBorder = XLBorderStyleValues.Thin;
                    worksheet.Cell(rowCount, i).Style.Border.RightBorder = XLBorderStyleValues.Thin;

                }
            }

            using (var stream = new MemoryStream())
            {
                stream.Position = 0;
                workbook.SaveAs(stream);
                var content = stream.ToArray();
                var fileName = fName + ".xlsx";
                await JsRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(content));
            }

        }
        notificationtype = "alert-success";
        Message = "Data Exported to Excel!";
        Show();
        Time = 5;
        HideAlert();
    }

    string notificationtype = "";
    string Message = "";
    private bool IsShow { get; set; } = true;

    private void Show()
    {
        IsShow = !IsShow;
    }

    [Parameter] public int Time { get; set; } = 3;

    public async void HideAlert()
    {
        while (Time > 0)
        {
            Time--;
            StateHasChanged();
            await Task.Delay(1000);
            if (Time == 1)
            {
                IsShow = true;
            }
        }
    }

}

